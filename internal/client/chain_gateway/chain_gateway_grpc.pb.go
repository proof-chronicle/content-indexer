// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/chain_gateway.proto

package chain_gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChainGateway_Store_FullMethodName = "/chain_gateway.ChainGateway/Store"
)

// ChainGatewayClient is the client API for ChainGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainGatewayClient interface {
	// Store a new content record on-chain
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
}

type chainGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewChainGatewayClient(cc grpc.ClientConnInterface) ChainGatewayClient {
	return &chainGatewayClient{cc}
}

func (c *chainGatewayClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, ChainGateway_Store_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainGatewayServer is the server API for ChainGateway service.
// All implementations must embed UnimplementedChainGatewayServer
// for forward compatibility.
type ChainGatewayServer interface {
	// Store a new content record on-chain
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	mustEmbedUnimplementedChainGatewayServer()
}

// UnimplementedChainGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChainGatewayServer struct{}

func (UnimplementedChainGatewayServer) Store(context.Context, *StoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedChainGatewayServer) mustEmbedUnimplementedChainGatewayServer() {}
func (UnimplementedChainGatewayServer) testEmbeddedByValue()                      {}

// UnsafeChainGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainGatewayServer will
// result in compilation errors.
type UnsafeChainGatewayServer interface {
	mustEmbedUnimplementedChainGatewayServer()
}

func RegisterChainGatewayServer(s grpc.ServiceRegistrar, srv ChainGatewayServer) {
	// If the following call pancis, it indicates UnimplementedChainGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChainGateway_ServiceDesc, srv)
}

func _ChainGateway_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainGatewayServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainGateway_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainGatewayServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainGateway_ServiceDesc is the grpc.ServiceDesc for ChainGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain_gateway.ChainGateway",
	HandlerType: (*ChainGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _ChainGateway_Store_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chain_gateway.proto",
}
